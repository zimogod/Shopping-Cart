
vue特点是什么？

vue核心是什么？

vue有哪些优点？

    1、渐进式框架
    2、数据驱动视图
    3、数据双向绑定
    4、偏向于UI【视图】

        原理：
        v-model:
         1、v-on:input
         2、b-bind:value

    vuex实现购物车：
        购物车组件内的复选条件：
        1、只要有一个单选没有选上，那么全选则不选
        2、一个一个的选择商品，知道商品全部选择后，则全选也选
        3、单选时，计算出单选的价格，全选时，计算全部购物车中商品的总价

任何数据都可以使用vuex进行管理 【公共】

vuex:
    state:存储数据，数据仓库
    mutations:修改state的唯一方法
    actions:提交mutations，异步的【用户可操作的、定时器，回调函数】
    getters:计算属性，有缓存值【基于组件中computed计算属性封装的】
如果分模块：
    modules:包含以上四个属性
    namespaced:true  :设置命名空间

如果分了模块：
    state、getters确实分开了
    mutations和actions暴露在vuex全局对象

    如果方法重名了，设置命名空间

shim、polyfill:作用都是 优雅降级 
优雅降级：思想，柔和的方法，进行降级，让以前的逗留期和现在的浏览器都可以使用

vue数据双向绑定的原理：
    原理：
        数据劫持，通过ES5中的Object.defineProperty()监听数据并且劫持数据，
        然后具体通过get、set对应的getter、setter方法进行监听修改数据，当属性
        被访问、修改时，通过watcher桥梁【信息转换站】通知组件进行变化，组件调用
        render进行更新页面
    注意：vue不兼容IE8及以下的浏览器 【ES3】根本就没有Object.defineProperty()方法
         Object.defineProperty()在IE8及以下的浏览器不能shim,不能做优雅降级

this.$nextTick():
    作用：
        等待真实DOM挂载到页面上才执行的方法，异步的方法
        不管哪个生命周期阶段，this.$nextTick()只会在组件挂载中，一定是你调用完成render
        函数了，this.$nextTick()里面可以操作真实的DOM元素

    this.$nextTick(() =>{}) 组件内
    Vue.nextTick(() =>{}) 全局

ref:引用元素或者组件【转发】，可以通过ref获取当前元素及所有子元素的所有内容
    可以用在元素上或者组件标签上
    命名： ref = 'xxx'
    获取：this.$refs.xxx

    缺点：
        操作真实DOM，非常耗费性能

面试题：要想操作真实DOM元素
    回答：
        1、在mounted挂载中生命周期
        2、nextTick()函数中操作

面试题：如果数据变化了，页面不更新怎么办？
     回答： 
        1、看数据是否是响应式的  如果不是通过 Vue.set()  this.$set()变成响应式数据
        2、强制更新视图  $forceUpdate():强制调用render函数  【缺点：耗性能】

vue组件有缓存怎么办？
    this.$destroy():销毁缓存，让当前组件进入初始化状态  【不常用】

Object.defineProperty(obj,'age',{
    属性描述符:描述age的值是否可修改、可配置、可删除、可新增
    存取描述符:通过set、get方法设置【存储】属性，获取【访问属性】
});

vue中组件分为两类：
    类组件：每个组件都有完整的功能，如：生命周期、data函数、实例【this】，有自己组件的数据
    函数式组件：
        概念：就是一个普通函数，大大降低了组件渲染消耗过程，只要负责写UI和CSS，
             数据都是从父组件传递过来，目前vue的版本直接可以解析props,不用声明
             props属性
    如何让一个组件变成函数式组件？
    
        设置一个functional属性即可

        场景：展示型页面  
        1、无状态：自己组件内部不管理数据，也不操作数据
        2、没有实例，没有this，没有生命周期，没有数据
        3、只会解析一个props属性，目前自动解析 

this.$slots.default:
    以一个数组的方式接收插槽内传递过来的所有对象

    场景：
        1、性能优化
        2、父传子 【间接】
        3、多用于封装UI组件 【常用】

    父组件：
        <template>
            <div>
                <Child>
                    <div>{{ userInfo }}</div>
                    <div>内容</div>
                    <div>尾</div>
                </Child>
            </div>
        </template>


    子组件：Child   [{ userInfo }]
        <template>
            <div v-if="this.$slots.default">
                <slot>hdhfgh</slot>
            </div>
        </template>








