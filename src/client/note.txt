
vue特点是什么？

vue核心是什么？

vue有哪些优点？

    1、渐进式框架
    2、数据驱动视图
    3、数据双向绑定
    4、偏向于UI【视图】

        原理：
        v-model:
         1、v-on:input
         2、b-bind:value

    vuex实现购物车：
        购物车组件内的复选条件：
        1、只要有一个单选没有选上，那么全选则不选
        2、一个一个的选择商品，知道商品全部选择后，则全选也选
        3、单选时，计算出单选的价格，全选时，计算全部购物车中商品的总价

任何数据都可以使用vuex进行管理 【公共】

vuex:
    state:存储数据，数据仓库
    mutations:修改state的唯一方法
    actions:提交mutations，异步的【用户可操作的、定时器，回调函数】
    getters:计算属性，有缓存值【基于组件中computed计算属性封装的】
如果分模块：
    modules:包含以上四个属性
    namespaced:true  :设置命名空间

如果分了模块：
    state、getters确实分开了
    mutations和actions暴露在vuex全局对象

    如果方法重名了，设置命名空间

shim、polyfill:作用都是 优雅降级 
优雅降级：思想，柔和的方法，进行降级，让以前的逗留期和现在的浏览器都可以使用

vue数据双向绑定的原理：
    原理：
        数据劫持，通过ES5中的Object.defineProperty()监听数据并且劫持数据，
        然后具体通过get、set对应的getter、setter方法进行监听修改数据，当属性
        被访问、修改时，通过watcher桥梁【信息转换站】通知组件进行变化，组件调用
        render进行更新页面
    注意：vue不兼容IE8及以下的浏览器 【ES3】根本就没有Object.defineProperty()方法
         Object.defineProperty()在IE8及以下的浏览器不能shim,不能做优雅降级

this.$nextTick():
    作用：
        等待真实DOM挂载到页面上才执行的方法，异步的方法
        不管哪个生命周期阶段，this.$nextTick()只会在组件挂载中，一定是你调用完成render
        函数了，this.$nextTick()里面可以操作真实的DOM元素

    this.$nextTick(() =>{}) 组件内
    Vue.nextTick(() =>{}) 全局

ref:引用元素或者组件【转发】，可以通过ref获取当前元素及所有子元素的所有内容
    可以用在元素上或者组件标签上
    命名： ref = 'xxx'
    获取：this.$refs.xxx

    缺点：
        操作真实DOM，非常耗费性能

面试题：要想操作真实DOM元素
    回答：
        1、在mounted挂载中生命周期
        2、nextTick()函数中操作

面试题：如果数据变化了，页面不更新怎么办？
     回答： 
        1、看数据是否是响应式的  如果不是通过 Vue.set()  this.$set()变成响应式数据
        2、强制更新视图  $forceUpdate():强制调用render函数  【缺点：耗性能】

vue组件有缓存怎么办？
    this.$destroy():销毁缓存，让当前组件进入初始化状态  【不常用】

Object.defineProperty(obj,'age',{
    属性描述符:描述age的值是否可修改、可配置、可删除、可新增
    存取描述符:通过set、get方法设置【存储】属性，获取【访问属性】
});

vue中组件分为两类：
    类组件：每个组件都有完整的功能，如：生命周期、data函数、实例【this】，有自己组件的数据
    函数式组件：
        概念：就是一个普通函数，大大降低了组件渲染消耗过程，只要负责写UI和CSS，
             数据都是从父组件传递过来，目前vue的版本直接可以解析props,不用声明
             props属性
    如何让一个组件变成函数式组件？
    
        设置一个functional属性即可

        场景：展示型页面  
        1、无状态：自己组件内部不管理数据，也不操作数据
        2、没有实例，没有this，没有生命周期，没有数据
        3、只会解析一个props属性，目前自动解析 

this.$slots.default:
    以一个数组的方式接收插槽内传递过来的所有对象

    场景：
        1、性能优化
        2、父传子 【间接】
        3、多用于封装UI组件 【常用】

    父组件：
        <template>
            <div>
                <Child>
                    <div>{{ userInfo }}</div>
                    <div>内容</div>
                    <div>尾</div>
                </Child>
            </div>
        </template>


    子组件：Child   [{ userInfo }]
        <template>
            <div v-if="this.$slots.default">
                <slot>hdhfgh</slot>
            </div>
        </template>


脏数据：开发项目的时候，从服务端请求数据代码全都没有错，100  --> 200  脏数据【数据库中的数据有缓存】

复习： 
    angular：脏检查   每过一段时间检查一下数据是否有变化，有变化了则调用一系列更新方法，
            没有变化直接返回
            时间轮询：定时器

    发布订阅者设计模式:百度  作业
    vue数据双向绑定原理:
        数据劫持+发布订阅者设计模式，实现数据双向绑定，具体通过Object.defineProperty()
        方法封装的，此Object.defineProperty()方法可以通过set/get 把vue组件中的data
        数据拦截修改并转换成getter/setter【响应式数据】，getter/setter进行监听我们数据，
        如果监听到数据变化了，则通知watcher【是一个信息传递者】，通过UI，数据就变化了

   this.num = 100;

   this._data.num = 100;



    data(){
        return {
            msg:'',
            num:100,
            info:''
        }
    }
    { num,info,msg }

    let _data = data()
    let _data = { num,info,msg };
Object.defineProperty(_data)


vue中组件分为两种：
    类组件：常用的，生命周期、data、实例【this】、计算属性、props
    函数式组件：
        如何一个组件变为函数式组件，设置functional:true,默认值为true
        概念： 
            就是一个普通函数，主要在函数式组件内写UI和css，目前的函数式组件可以默认解析
            props属性，数据只能从父级传递过来，自己组件没有数据，更不能操作数据，没有
            this，生命周期
        场景：官网、展示型的页面

        1、无状态  --> 无数据
        2、没有实例 【没有this】
        3、只能解析props属性 
    优点：
        消耗非常少，只是执行了一个普通函数，渲染过程减少
 
 $attrs:
    以对象的方式接收父组件传递过来的所有数据,如果在组件中某个
    属性使用props进行接收了，则$attrs会自动剔除当前属性

this.$destroy():
    清空当前组件内的数据缓存，组件还在，把当前组件重置【初始化】
this.$emit('send','数据'):
    只负责发送数据
this.$on('send',() =>{}):
    只负责接收数据
this.$off('send'):
    解绑监听函数

Vue.component():
components:{'组件名',{}}

watch:监听url路由、data数据、props
    deep:true :深度监听
    immediate : 立即开启监听

    data(){
        return {
            num1:100
        } 
    }
    watch:{
        num1(newValue,oldValue){

        },
        deep:true,
        immediate:true
    }
computed:计算属性，有缓存值

methods、watch、computed 区别？

解耦：

    data(){
        return {
            msg:'daxian'
        }
    }
    data() ===>  {}

    Vue.prototype._data = {}  == data()
    Vue.prototype._data = {msg:''}

filters: 局部过滤器
    有一个固定参数，此参数就是你要格式化的数据
Vue.filter():全局过滤器
    有一个固定参数，此参数就是你要格式化的数据，全局的，
    在当前vue项目中任何地方都可以使用

directives:局部注册自定义指令
    局部注册自定义指令，第一个参数为指令名，第二个参数为回调函数
    回调函数里面有三个参数，分别：
    el:当前绑定指令的元素
    binding:相当于你动态传入的参数
    vnode:当前元素的虚拟DOM  【不常用】
Vue.directive():全局注册自定义指令
    全局注册自定义指令，第一个参数为指令名，第二个参数为回调函数
    回调函数里面有三个参数，分别：
    el:当前绑定指令的元素
    binding:相当于你动态传入的参数
    vnode:当前元素的虚拟DOM  【不常用】

    自定义指令场景：
        封装日历组件的时候才使用 【事件委托】

ref:引用 【转发】，获取一个元素或者组件的实例【全部内容】 
    缺点：操作真实DOM，能不用就不用
    
Vue中diff算法：
    打补丁：精细 
    diff算法原理：算法复杂度 O[n]
       1、都是通过三层对比进行虚拟DOM的计算、替换等等，注意的是不能跨层对比
         页面对比【html】、组件对比【component】、元素对比【element】

       2、key：key一致，diff算法认为没有变化，无需更新，无需重新计算

真实DOM解构
<div>
  <span>fgg1</span>
  <span>fgg2</span>
</div>
// 转换成虚拟节点 类似于下面这种
const Vnode = {
  tag:'div',
  key:'34',
  children:[
      {
        tag:'span',
        key:'788',
        children:'fgg'
    },
    {
        tag:'span',
        key:'789',
        children:'fgg'
    }
  ]
}
1、如果oldNode和newNode一样，则直接return，无需再进行下去
2、diff算法检查key的变化  diff算法 【打补丁】
3、patch更新虚拟DOM      虚拟DOM
4、更新完之后patch通知render函数

    function patch(oldNode,VNode){
        初始化时候，第一次加载组件
        if(!oldNode){
            oldNode = newNode
        }else if(oldNode === newNode){
            return ;
        }else{
            render:(createElement) => {
                return createElement(div,{id:'app'},[
                    {
                        tag:'div',
                        key:'34',
                        children:'见风使舵开会发给'
                    },
                ])
            }
        }
        render: h => h(App)
        
    }
    patch()



